/*Terceira atividade*/

#Atividade prova A

with cte_Clien_Total (NomeCliente, Valor, Descontos) as (
SELECT 
  CUSTOMERNAME AS CLIENTE, 
  SUM(AMOUNT) AS VALOR_TOTAL, 
  CASE 
    WHEN SUM(AMOUNT) > 50000 THEN SUM(AMOUNT) * 0.05
    WHEN SUM(AMOUNT) > 20000 THEN SUM(AMOUNT) * 0.03
    WHEN SUM(AMOUNT) > 10000 THEN SUM(AMOUNT) * 0.02
    ELSE 0
  END AS DESCONTO
FROM 
  PAYMENTS
    INNER JOIN CUSTOMERS USING (CUSTOMERNUMBER)
WHERE 
  YEAR(PAYMENTDATE) IN (2003, 2004) 
AND MONTH(PAYMENTDATE) BETWEEN 1 AND 6
GROUP BY
  CLIENTE
ORDER BY 
  DESCONTO DESC
LIMIT 50)
select * from cte_Clien_Total;


with cte_TotalProduto(ProdutoNome,Quantidade) as (
SELECT 
  PRODUCTNAME,
  SUM(QUANTITYORDERED)
FROM 
  PRODUCTS
    INNER JOIN ORDERDETAILS USING (PRODUCTCODE)
    INNER JOIN ORDERS USING (ORDERNUMBER)
WHERE 
  YEAR(ORDERDATE) = 2004
GROUP BY
  PRODUCTNAME
HAVING 
  SUM(QUANTITYORDERED) > 550),
  
 cte_TotalCliente_Acima(NomeCliente, Pago) as (
SELECT 
  CUSTOMERNAME AS CLIENTE, 
  SUM(AMOUNT) AS PAGO
FROM 
  PAYMENTS 
    INNER JOIN CUSTOMERS USING (CUSTOMERNUMBER)
    INNER JOIN EMPLOYEES ON SALESREPEMPLOYEENUMBER = EMPLOYEENUMBER
    INNER JOIN OFFICES USING (OFFICECODE)
WHERE 
  YEAR(PAYMENTDATE) = 2003
AND OFFICES.CITY IN ('Paris', 'Tokyo')
GROUP BY
  CLIENTE
HAVING 
  SUM(AMOUNT) > 100000),

cte_Totak_Vendedor(Venedor, Venda) as(
SELECT 
  CONCAT(FIRSTNAME, ' ', LASTNAME) AS VENDEDOR, 
  SUM(AMOUNT) AS TOTAL_VENDA
FROM 
    PAYMENTS 
    INNER JOIN CUSTOMERS USING (CUSTOMERNUMBER)
    INNER JOIN EMPLOYEES ON SALESREPEMPLOYEENUMBER = EMPLOYEENUMBER
WHERE 
   YEAR(PAYMENTDATE) = 2005
HAVING 
  SUM(AMOUNT) > 200000)
select * from cte_TotalProduto union select * from cte_TotalCliente_Acima union select * from cte_Totak_Vendedor;

use sakila;
with cte_TotalCliente_País(Pais,QuantidadeCliente) as (
SELECT 
  COUNTRY AS PAIS, 
  COUNT(DISTINCT CUSTOMER_ID) AS QTDE
FROM 
  COUNTRY
    INNER JOIN CITY USING (COUNTRY_ID)
    INNER JOIN ADDRESS USING (CITY_ID)
    INNER JOIN CUSTOMER USING (ADDRESS_ID)
    INNER JOIN PAYMENT USING (CUSTOMER_ID)
WHERE 
  YEAR(PAYMENT_DATE) = 2005
AND MONTH(PAYMENT_DATE) IN (5,6,7)
GROUP BY
 PAIS
ORDER BY QTDE DESC
LIMIT 10)

select * from cte_TotalCliente_País;

/*---------------------------------------------------*/

#Prova b

USE SAKILA;

with cte_Conferencia_Caixa(Clinte,Valor,Analise_Dia,Analise) as(
SELECT 
  CONCAT(FIRST_NAME, ' ', LAST_NAME) AS CLIENTE, 
  SUM(AMOUNT) AS VALOR_PAGO, 
  IFNULL(RENTAL_DURATION - CAST(DATEDIFF(RETURN_DATE, RENTAL_DATE) AS DECIMAL), 999) AS ANALISE_DIA, 
  CASE 
    WHEN 
    IFNULL(RENTAL_DURATION - CAST(DATEDIFF(RETURN_DATE, RENTAL_DATE) AS DECIMAL), 999) < 0
      OR IFNULL(RENTAL_DURATION - CAST(DATEDIFF(RETURN_DATE, RENTAL_DATE) AS DECIMAL), 999) = 999
	THEN 
      CONCAT('Informar ao cliente ', FIRST_NAME, ' ', LAST_NAME, ' tem restrições para alugar')
    ELSE
      CONCAT('Informar ao cliente ', FIRST_NAME, ' ', LAST_NAME, ' que terá 10% de desconto')
  END AS ANALISE
FROM 
  CUSTOMER
    INNER JOIN PAYMENT USING(CUSTOMER_ID)
    INNER JOIN RENTAL USING (RENTAL_ID)
    INNER JOIN INVENTORY USING (INVENTORY_ID)
    INNER JOIN FILM USING (FILM_ID)
WHERE 
   YEAR(PAYMENT_DATE) = 2005
AND MONTH(PAYMENT_DATE) = 8
GROUP BY
  CLIENTE, ANALISE_DIA, ANALISE
LIMIT 10)

select * from cte_Conferencia_Caixa;

with cte_Filme(Titulo,Loja,Nome,Quantidade) as( 
 SELECT 
  TITLE AS TITULO, 
  STORE_ID AS LOJA, 
  NAME AS CATEGORIA, 
  COUNT(INVENTORY_ID) AS QTDE
FROM 
  CATEGORY
    INNER JOIN FILM_CATEGORY USING (CATEGORY_ID)
    INNER JOIN FILM USING (FILM_ID)
    INNER JOIN INVENTORY USING (FILM_ID)
    LEFT JOIN RENTAL USING (INVENTORY_ID)
WHERE 
  RENTAL_ID IS NULL
GROUP BY
  TITULO, LOJA, CATEGORIA)
  select * from cte_Filme;
  
  with cte_RetorneQuantidade(Categoria,Loja,Quandida) as(
  SELECT 
  NAME AS CATEGORIA, 
  STORE_ID AS LOJA, 
  COUNT(INVENTORY_ID) AS QTDE
FROM 
  CATEGORY
    INNER JOIN FILM_CATEGORY USING (CATEGORY_ID)
    INNER JOIN FILM USING (FILM_ID)
    INNER JOIN INVENTORY USING (FILM_ID)
WHERE 
  CATEGORY.NAME IN ('Comedy', 'Drama') 
GROUP BY
  CATEGORIA, LOJA)
  
  select * from cte_RetorneQuantidade;